-- Expose configuration and control to the GUI
getgenv().AimBotConfig = getgenv().AimBotConfig or {}
local config = getgenv().AimBotConfig

-- Default settings
config.visibilityCheck = true -- Enable visibility check by default
config.aimEnabled = false -- Aim is disabled by default
config.FOVRadius = 150 -- Set default FOV radius
config.smoothness = 0.2 -- Smooth aiming factor

-- AimLock Settings from FE Simple AimLock
config.aimPart = "HumanoidRootPart" -- Default aiming part
config.teamCheck = false -- Should ignore players on the same team
config.epitaph = 0.187 -- Aim prediction adjustment
config.headOffset = Vector3.new(0, 0.1, 0)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = true
FOVCircle.Thickness = 1
FOVCircle.Transparency = 1
FOVCircle.Color = Color3.fromRGB(255, 0, 0)
FOVCircle.Radius = config.FOVRadius
FOVCircle.Filled = false

-- Update FOV circle position
RunService.RenderStepped:Connect(function()
    local mouseLocation = UserInputService:GetMouseLocation()
    FOVCircle.Position = Vector2.new(mouseLocation.X, mouseLocation.Y)
end)

-- Function to check if target is visible (not behind walls)
local function isTargetVisible(targetPart)
    if not config.visibilityCheck then
        return true -- Skip visibility check if disabled
    end

    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * (targetPart.Position - origin).Magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, targetPart.Parent}
    raycastParams.FilterType = Enum.RaycastFilterType.Exclude

    local raycastResult = Workspace:Raycast(origin, direction, raycastParams)
    return not raycastResult -- Return true if there is no obstruction
end

-- Function to find nearest player within FOV
local function findNearestPlayer()
    local closestTarget = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            if not config.teamCheck or player.Team ~= LocalPlayer.Team then
                local character = player.Character
                local aimPart = character:FindFirstChild(config.aimPart)
                if aimPart and isTargetVisible(aimPart) then
                    local aimPartScreenPos, onScreen = Camera:WorldToViewportPoint(aimPart.Position)
                    if onScreen then
                        local mouseLocation = UserInputService:GetMouseLocation()
                        local distance = (Vector2.new(aimPartScreenPos.X, aimPartScreenPos.Y) - mouseLocation).Magnitude

                        if distance < shortestDistance and distance <= config.FOVRadius then
                            closestTarget = character
                            shortestDistance = distance
                        end
                    end
                end
            end
        end
    end

    return closestTarget
end

-- Function to lock onto a player only if within the FOV
local function lockOntoPlayer(targetCharacter)
    if targetCharacter and targetCharacter:FindFirstChild(config.aimPart) then
        local aimPart = targetCharacter[config.aimPart]
        local predictedPosition = aimPart.CFrame + (aimPart.Velocity * config.epitaph) + config.headOffset
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, predictedPosition.Position)
    end
end

-- Main aimlock logic
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        config.aimEnabled = true

        while config.aimEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) do
            RunService.RenderStepped:Wait()

            local target = findNearestPlayer() -- Continuously find the nearest target within FOV and visible
            if target then
                lockOntoPlayer(target)
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        config.aimEnabled = false
    end
end)

-- Functions to control aiming through GUI or command
function config.startAim()
    config.aimEnabled = true
    print("Aim enabled. Visibility Check:", config.visibilityCheck)
end

function config.stopAim()
    config.aimEnabled = false
    print("Aim disabled.")
end

-- Update FOV radius dynamically
function config.setFOVRadius(radius)
    config.FOVRadius = radius
    FOVCircle.Radius = radius
    print("FOV radius updated to:", radius)
end

print("AimLock script loaded successfully. Visibility Check:", config.visibilityCheck)
